nextflow_process {

    name "Test Process STIMULUS_TORCHTUNE"
    script "../main.nf"
    process "STIMULUS_TORCHTUNE"

    tag "modules"
    tag "modules_nfcore"
    tag "stimulus"
    tag "stimulus/torchtune"
    tag "stimulus/splitcsv"

    test("test") {
        config "./test.config"

        setup {
            run("STIMULUS_SPLITCSV") {
                script "../../splitcsv/main.nf"
                process {
                """
                input[0] = [
                    [ id:'test'],
                      file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                ]
                input[1] = [
                      file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/input_data_with_split.csv', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                experiment_ch = Channel.of([[ id:'test'],
                      file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/experiment_config.json', checkIfExists: true)
                ])
                
                input[0] = STIMULUS_SPLITCSV.out.split_csv.join(experiment_ch)

                input[1] = [
                    file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/tune_config.yaml',  checkIfExists: true), 
                    file(params.modules_testdata_base_path + '../../deepmodeloptim/testdata/dna_experiment/dna_to_float_model.py',  checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
